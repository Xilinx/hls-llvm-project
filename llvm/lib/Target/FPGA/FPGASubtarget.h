// (c) Copyright 2016-2020 Xilinx, Inc.
// All Rights Reserved.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//===----------------------------------------------------------------------===//
//
// This file declares the FPGA specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_FPGA_FPGASUBTARGET_H
#define LLVM_LIB_TARGET_FPGA_FPGASUBTARGET_H

#include "FPGA.h"
#include "llvm/ADT/Triple.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "FPGAGenSubtargetInfo.inc"

namespace llvm {

class GlobalValue;
class StringRef;
class TargetMachine;

class FPGASubtarget final : public FPGAGenSubtargetInfo {

protected:
  enum FPGAFamilyEnum { Gen7, UltraScale, UltraScaleP };

  /// FPGA family: UltraScale+ and others.
  FPGAFamilyEnum FPGAFamily;

  const TargetMachine &TM;

  /// What processor and OS we're targeting.
  Triple TargetTriple;

  /// DSP models
  bool DSP48E1;
  bool DSP48E2;

  /// Architecture
  bool IsUltrascale;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  FPGASubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                const FPGATargetMachine &TM);

  /// Parse features string setting. Auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

private:
  /// Initialize the full set of dependencies so we can use an initializer
  /// list for FPGASubtarget.
  FPGASubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);
  void initializeEnvironment();
  void initSubtargetFeatures(StringRef CPU, StringRef FS);

public:
  const Triple &getTargetTriple() const { return TargetTriple; }
};

} // End llvm namespace

#endif
