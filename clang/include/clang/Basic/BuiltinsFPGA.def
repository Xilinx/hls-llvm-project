// (C) Copyright 2016-2022 Xilinx, Inc.
// Copyright (C) 2023-2024, Advanced Micro Devices, Inc.
// All Rights Reserved.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//===----------------------------------------------------------------------===//
//
// This file defines the SPIR-specific builtin function database.  Users of
// this file must define the BUILTIN macro to make use of this information.
//
//===----------------------------------------------------------------------===//

// The format of this database matches clang/Basic/Builtins.def.

//
// Muxing
//
BUILTIN(__fpga_mux, "vvC*i.", "tn")
BUILTIN(__fpga_sparse_mux, "vvC*ivC*.", "tn")

//
// Arbitrary Precision Floating-Point
//

BUILTIN(__fpga_float_add, "vv*vC*vC*ii", "tn")
BUILTIN(__fpga_float_sub, "vv*vC*vC*ii", "tn")
BUILTIN(__fpga_float_mul, "vv*vC*vC*ii", "tn")
BUILTIN(__fpga_float_div, "vv*vC*vC*ii", "tn")
BUILTIN(__fpga_float_fma, "vv*vC*vC*vC*ii", "tn")
BUILTIN(__fpga_float_sqrt, "vv*vC*ii", "tn")
BUILTIN(__fpga_float_from_fixed, "vv*vC*iiii", "tn")
BUILTIN(__fpga_float_to_fixed, "vv*vC*iiii", "tn")
BUILTIN(__fpga_float_to_float, "vv*vC*iiii", "tn")
BUILTIN(__fpga_float_compare_eq, "bvC*vC*ii", "tn")
BUILTIN(__fpga_float_compare_le, "bvC*vC*ii", "tn")
BUILTIN(__fpga_float_compare_lt, "bvC*vC*ii", "tn")
BUILTIN(__fpga_float_compare_ne, "bvC*vC*ii", "tn")
BUILTIN(__fpga_float_compare_uo, "bvC*vC*ii", "tn")


//
// FIFO
//

BUILTIN(__fpga_fifo_not_empty, "bvC*", "tn")
BUILTIN(__fpga_fifo_not_full, "bvC*", "tn")
BUILTIN(__fpga_fifo_nb_pop, "bv*v*", "tn")
BUILTIN(__fpga_fifo_nb_push, "bv*vC*", "tn")
BUILTIN(__fpga_fifo_pop, "vv*v*", "tn")
BUILTIN(__fpga_fifo_push, "vv*vC*", "tn")
BUILTIN(__fpga_fifo_size, "ivC*", "tn")
BUILTIN(__fpga_fifo_capacity, "ivC*", "tn")


//
// PIPO
//

BUILTIN(__fpga_pipo_not_empty, "bvC*", "tn")
BUILTIN(__fpga_pipo_not_full, "bvC*", "tn")
BUILTIN(__fpga_pipo_pop_acquire, "vv*", "tn")
BUILTIN(__fpga_pipo_pop_release, "vv*", "tn")
BUILTIN(__fpga_pipo_push_acquire, "vv*", "tn")
BUILTIN(__fpga_pipo_push_release, "vv*", "tn")


//
//  Stream
//
BUILTIN(__fpga_set_stream_of_blocks_depth, "vv*i", "tn")


//
// Shift registers
//

BUILTIN(__fpga_shift_register_shift, "viv*b", "tn")
BUILTIN(__fpga_shift_register_peek, "iv*z", "tn")

//
// AXIS
//
BUILTIN(__fpga_axis_ready, "bvC*vC*vC*vC*vC*vC*vC*", "tn")
BUILTIN(__fpga_axis_valid, "bvC*vC*vC*vC*vC*vC*vC*", "tn")
BUILTIN(__fpga_axis_pop, "vv*v*v*v*v*v*v*v*v*v*v*v*v*v*", "tn")
BUILTIN(__fpga_axis_push, "bv*v*v*v*v*v*v*vC*vC*vC*vC*vC*vC*vC*", "tn")
BUILTIN(__fpga_axis_nb_pop, "bv*v*v*v*v*v*v*v*v*v*v*v*v*v*", "tn")
BUILTIN(__fpga_axis_nb_push, "bv*v*v*v*v*v*v*vC*vC*vC*vC*vC*vC*vC*", "tn")

//
// Manual Burst
BUILTIN(__fpga_maxi_read_req, "vv*i", "tn")
BUILTIN(__fpga_maxi_read, "vv*v*", "tn")
BUILTIN(__fpga_maxi_write_req, "vv*i", "tn")
BUILTIN(__fpga_maxi_write, "vv*vC*vC*", "tn")
BUILTIN(__fpga_maxi_write_resp, "vv*", "tn")

BUILTIN(__fpga_add_task, "vi*i*", "tn")
BUILTIN(__fpga_add_infinite_task, "vi*i*", "tn")
BUILTIN(__fpga_nport_channel,  "vv*v*iiiii", "tn")
BUILTIN(__fpga_ip,  "vcC*a", "tn")
BUILTIN(__fpga_fence,  "v.", "tn")
BUILTIN(__fpga_fence_group,  "v.", "tn")
BUILTIN(__fpga_fence_with_group,  "vii", "n")

//
// DirectIO
//
BUILTIN(__fpga_direct_valid, "bvC*", "tn")
BUILTIN(__fpga_direct_ready, "bvC*", "tn")
BUILTIN(__fpga_direct_load, "vv*v*", "tn")
BUILTIN(__fpga_direct_store, "vv*vC*", "tn")

#undef BUILTIN
